@import "./_variables.scss";

body {
  margin: 0;
  padding: 0;
  font-size: $sizeFontBase;
  line-height: 1.2 * $sizeFontBase;
  font-family: "Open Sans", sans-serif;
  overflow: hidden;
}

svg {
  shape-rendering:geometricPrecision; 
  text-rendering:geometricPrecision; 
  image-rendering:optimizeQuality; 
  fill-rule:evenodd; 
  clip-rule:evenodd
}

div {
  padding: 0;
  margin: 0;
  box-sizing: border-box;
}

#app {
  > h1 {
    font-size: 2 * $sizeFontBase;
  }

  > main {
    position: fixed;
    top: $sizeHeaderHeight;
    left: 0;
    right: 0;
    bottom: $sizeFooterHeight;
  }

  > header {
    position: static;
    box-sizing: border-box;
    top: 0;
    left: 0;
    padding: 0;
    width: 100%;
    height: $sizeHeaderHeight;
    background: $colorHeaderBg;
  }

  p {
    margin: 0;
    padding: 0;
  }

  .centeredLabel {
    display: block;
    margin: auto;
    width: 100%;
    text-align: center;
  }
}

#app .footer {
  position: fixed;
  bottom: 0;
  left: 0;
  right: 0;
  height: $sizeFooterHeight;
  background: $colorBgLight;
}

.relative {
  width: 100%;
  height: 100%;
  padding: 0;
  position: relative;
}

#app .modeBar {
  position: absolute;
  top: 0;
  left: 0;
  width: $sizeModeBarWidth + (2 * $sizeC);
  padding: $sizeC;
  height: 100%;
  background: $colorBgMedium;

  .icon {
    width: $sizeModeBarWidth;
    height: $sizeModeBarWidth;
    padding: 0;
    box-sizing: border-box;
    overflow: visible;
    background: pink;

    .iconBg {
      fill: $colorIconBgDefault;
      stroke: $colorDark;
      stroke-width: 4px;
    }

    .iconBaseColor {
      fill: $colorBase;
    }

    .darkOutlineWhite {
      fill: white;
      stroke: $colorDark;
      stroke-width: 7px;
    }

    &:hover:not(.active) {
      cursor: pointer;
      .iconBg {
        fill: $colorIconBgHover;
      }
    }

    &.active {
      .iconBg {
        fill: $colorIconBgActive;
      }
    }
  }
}

#app .icon {

  width: $sizeIcon;
  height: $sizeIcon;
  margin: 0;
  padding: 0;
  background: $colorIconBgActive;
  border-radius: $sizeButtonRadius;

  > svg {
    width: 100%;
    height: 100%;
    display: block;
    overflow: visible;

    * {
      fill: none;
      stroke: none;
    }

    .up, .down, .left, .right {
      transition: all 0.5s;
      transform-box: fill-box;
      transform-origin: center;
      transform: rotate(0);
    }
  
    .up {
      transform: rotate(180deg);
    }
  
    .left {
      transform: rotate(90deg);
    }
  
    .right {
      transform: rotate(-90deg)
    }
    
  }

  &.iconBg {
    fill: $colorIconBgDefault;
  }

  .iconBaseColor {
    fill: $colorBase;
  }

  .darkOutlineWhite {
    fill: white;
    stroke: $colorDark;
    stroke-width: 7px;
  }

  &:hover:not(.active) {
    .iconBg {
      fill: $colorIconBgHover;
    }
  }

  &.active {
    .iconBg {
      fill: $colorIconBgActive;
    }
  }
}

#app .scrollBarVert {
  position: absolute;
  overflow: hidden;
  width: $sizeScrollBarWidth;
  top: 0;
  right: 0;
  bottom: $sizeScrollBarWidth;
  overflow: visible;

  .upButton,
  .downButton {
    position: absolute;
    display: block;
    top: 0;
    left: 0;
    bottom: auto;
    height: $sizeScrollBarWidth;
    width: $sizeScrollBarWidth;
  }

  .downButton {
    bottom: 0;
    top: auto;
  }

  .scrollArea {
    position: absolute;
    left: 0;
    top: 0;
    bottom: 0;
    right: 0;
    background: $colorScrollBarBg;
  }
  
  .scrollBarButton {
    background: $colorButtonBg;
    border: none;
    outline: none;
    padding: 0;
    margin: 0;
    min-height: 30px;
    border-radius: $sizeButtonRadius;
    display: block;
    border: none;
    left: 2px;
    right: 2px;    
    top: 50px;
    position: absolute;
    box-sizing: border-box;
    background: $colorButton;
  }
}

#app .scrollBarHorz, #app .scrollBarVert {
  .icon.iconBg {
    background: $colorGrayLight;
    border-radius: 1px;
    width: 100%;
    height: 100%;
  }
}

#app .scrollBarHorz {
  position: absolute;
  bottom: 0;
  left: 0;
  right: $sizeScrollBarWidth;
  height: $sizeScrollBarWidth;
  overflow: hidden;
  background: $colorScrollBarBg;

  .upButton,
  .downButton {
    position: absolute;
    display: block;
    top: 0;
    bottom: 0;
    left: 0;
    right: auto;
    width: $sizeScrollBarWidth;
    cursor: pointer;
  }

  .downButton {
    right: 0;
    left: auto;
  }

  .scrollBarButton {
    padding: 0;
    border-radius: $sizeButtonRadius;
    min-width: 30px;
    display: block;
    border: none;
    position: absolute;
    left: 50px;
    top: 2px;
    bottom: 2px;
    z-index: 2;
    background: $colorButton;
  }

  .scrollArea {
    position: absolute;
    left: 0;
    right: 0;
    left: 0;
    bottom: 0;
    top: 0;
    
  }
}

#app .valueScroller {
  width: 100%;
  height: 5 * $sizeFontBase;
  position: relative;
  padding: $sizePadding;
  user-select: none;

  * {
    user-select: none;
  }

  .scrollBarContainer {
    position: relative;
    margin-top: 0.5 * $sizeFontBase;
    height: $sizeValueScrollerWidth;
    margin-bottom: 0.5 * $sizeFontBase;
    overflow: visible;

    .upButton,
    .downButton {
      position: absolute;
      display: block;
      top: 0;
      left: 0;
      bottom: auto;
      height: $sizeValueScrollerWidth;
      width: $sizeValueScrollerWidth;
      background: $colorButtonBg;
    
      &::before {
        content: "";
        display: block;
        width: 0;
        height: 0;
        border-left: 6px solid transparent;
        border-right: 6px solid transparent;
        border-bottom: 6px solid $colorDark;
        border-top: none;
        margin: 6px 3px;
      }
    }

    .downButton {
      bottom: 0;
      top: auto;
    }
    
    .scrollArea {
      position: absolute;
      top: 0;
      bottom: 0;
      left: 0;
      right: 0;
      overflow: hidden;
      overflow: visible;
      background: $colorBgLight;
      border-radius: calc($sizeValueScrollerWidth / 2);
    }

    .downButton + .scrollArea {
      left: $sizeValueScrollerWidth;
      right: $sizeValueScrollerWidth;
    }
    
    .scrollBarButton {
      position: absolute;
      border: none;
      width: $ratioValueScrollerButton * $sizeValueScrollerWidth;
      background: $colorButton;
      left: calc(($sizeValueScrollerWidth * $ratioValueScrollerButton - $sizeValueScrollerWidth) / -2);
      top: calc(($sizeValueScrollerWidth * $ratioValueScrollerButton - $sizeValueScrollerWidth) / -2);
      height: $ratioValueScrollerButton * $sizeValueScrollerWidth;
      border-radius: calc($sizeValueScrollerWidth * $ratioValueScrollerButton / 2);
    }
  }

  &.useVw {
    height: 4 * $vwFontBase;
    padding: 0.5 * $vwFontBase $vwPadMedium 0 $vwPadMedium;
    margin: 0;

    label {
      font-size: $vwFontBase;
      line-height: 1.2 * $vwFontBase;
    }
  
    .scrollBarContainer {
      margin-top: 0.5 * $vwFontBase;
      height: $vwValueScrollerWidth;
      margin-bottom: 0.5 * $vwFontBase;
  
      .upButton,
      .downButton {
        height: $vwValueScrollerWidth;
        width: $vwValueScrollerWidth;
      }
  
      .scrollArea {
        border-radius: calc($vwValueScrollerWidth / 2);
      }
  
      .downButton + .scrollArea {
        left: $vwValueScrollerWidth;
        right: $vwValueScrollerWidth;
      }
      
      .scrollBarButton {
        width: $ratioValueScrollerButton * $vwValueScrollerWidth;
        left: calc(($vwValueScrollerWidth * $ratioValueScrollerButton - $vwValueScrollerWidth) / -2);
        top: calc(($vwValueScrollerWidth * $ratioValueScrollerButton - $vwValueScrollerWidth) / -2);
        height: $ratioValueScrollerButton * $vwValueScrollerWidth;
        border-radius: calc($vwValueScrollerWidth * $ratioValueScrollerButton / 2);
      }
    }
  }
} 

#app .debug {
  position: fixed;
  top: 200px;
  left: 1200px;
  height: 800px;
  width: 500px;
  background: yellow;
  z-index: 1000;
}

#app .accordionControl {
  padding: $sizeC;
  height: 100%;
  width: 100%;
  
  .accordionHeader {
    display: flex;
    justify-content: space-between;
    background: $colorBarBg;
    padding: $sizeD;

    &:hover {
      opacity: 0.7;
      cursor: pointer;
    }
    
    > h2 {
      padding: 0;
      margin: 0;
      font-size: 1.3 * $sizeFontBase;
      line-height: 1.45 * $sizeFontBase;
    }

    .icon {
      height: 1.7 * $sizeFontBase;
      width: 1.7 * $sizeFontBase;
      &.iconBg {
        background: transparent;
      } 
    }  
    
    & + .accordionPane {
      margin-top: $sizeD;
    }

    &.disabled {
      
      background: $colorGrayLight;

      > h2 {
        color: $colorGrayMedium;
      }

      &:hover {
        opacity: 1;
        cursor: default;
      }
    }
  }

  .accordionPane {
    width: 100%;
    height: auto;
    overflow: hidden;
    padding: 0;
    transition: all .5s;
  }
}

#app .useVw .accordionControl {
  padding: $vwPadSmall;
  
  .accordionHeader {
    padding: $vwPadMedium;

    h2 {
      font-size: 1.3 * $vwFontBase;
      line-height: 1.4 * $vwFontBase;
    }

    .icon {
      height: 1.5 * $vwFontBase;
      width: 1.5 * $vwFontBase;
    }  
    
    & + .accordionPane {
      margin-top: $vwPadSmall;
    }

  }
}

#app .stateSelector {
  height: 100%;
  width: 100%;
  padding: $sizeB;
  border-radius: $sizeD;
  position: relative;

  &::before {
    content: '';
    display: block;
    border-radius: $sizeD;
    background: white;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    opacity: 0.4;
    position: absolute;
  }
  
  + .stateSelector {
    margin-left: 10px;
  }

  label {
    width: 100%;
    height: 14px;
    font-size: $sizeFontSmall;
    line-height: 12px;
    display: block;
    position: absolute;
    top: 2px;
    left: $sizeD;
  }

  .selectorButtons {
    display: flex;
    height: 20px;
    flex-direction: row;
    position: absolute;
    top: 16px;
    left: $sizeD;
    bottom: 0;
    right: $sizeD;
    
    .button {
      height: 100%;
      flex-grow: 1;
      position: relative;
      display: block;
      padding: $sizeA;
      margin: 0;
      box-sizing: border-box;
      outline: none;
      border: none;
      border-radius: $sizeButtonRadius;
      background: $colorButtonBg;

      &:hover {
        background: $colorButtonBgHover;
      }
      
      &.selected {
        background: $colorButtonBgSelected;

        &::before {
          background: $colorIndicatorSelected;
          border-color: $colorIndicatorBorderSelected;
        }
      }
      + .button {
        margin-left: $sizeC;
      }

      &::before {
        content: '';
        width: $sizeFontBase * 0.6;
        height: $sizeFontBase * 0.6;
        border-radius: $sizeFontBase * 0.3;
        border: 1px solid $colorGrayMedium;
        background: $colorGrayMediumLight;
        display: block;
        position: absolute;
        top: $sizeC;
        left: $sizeD;
      }

      > span {
        display: block;
        position: absolute;
        top: -3px;
        font-size: $sizeFontSmall;
        left: $sizeFontBase * 1.8;
        line-height: $sizeFontBase * 1.9
      }
    }
  }
}


